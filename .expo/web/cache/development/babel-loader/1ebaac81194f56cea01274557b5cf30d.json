{"ast":null,"code":"import * as React from 'react';\nimport createElement from \"../createElement\";\nimport * as forwardedProps from \"../../modules/forwardedProps\";\nimport pick from \"../../modules/pick\";\nimport useElementLayout from \"../../modules/useElementLayout\";\nimport useLayoutEffect from \"../../modules/useLayoutEffect\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePlatformMethods from \"../../modules/usePlatformMethods\";\nimport useResponderEvents from \"../../modules/useResponderEvents\";\nimport { getLocaleDirection, useLocaleContext } from \"../../modules/useLocale\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = React.forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(function (hostNode) {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange(hostNode);\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(function () {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = useLocaleContext(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection: writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;","map":{"version":3,"sources":["C:/Users/CORNELIUS/Desktop/sertifika-mobil/sertifika-app/node_modules/react-native-web/dist/exports/TextInput/index.js"],"names":["React","createElement","forwardedProps","pick","useElementLayout","useLayoutEffect","useMergeRefs","usePlatformMethods","useResponderEvents","getLocaleDirection","useLocaleContext","StyleSheet","TextInputState","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","Object","assign","defaultProps","accessibilityProps","clickProps","focusProps","keyboardProps","mouseProps","touchProps","styleProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","focusTimeout","TextInput","forwardRef","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","_props$editable","editable","_props$keyboardType","keyboardType","_props$multiline","multiline","_props$numberOfLines","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","inputMode","dimensions","useRef","height","width","hostRef","handleContentSizeChange","useCallback","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","contentSize","imperativeRef","useMemo","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","clearTimeout","setTimeout","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","_useLocaleContext","contextDirection","direction","supportedProps","undefined","enterKeyHint","onKeyDown","onSelect","style","styles","textinput$raw","platformMethodsRef","setRef","ref","langDirection","componentDirection","writingDirection","element","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\n\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\n\n\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\n\nvar pickProps = props => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var hostNode = e.target;\n\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    var hostNode = e.target; // Prevent key events bubbling (see #612)\n\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostNode != null) {\n        hostNode.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n\n  var _useLocaleContext = useLocaleContext(),\n      contextDirection = _useLocaleContext.direction;\n\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction\n\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterKeyHint = returnKeyType;\n  supportedProps.inputMode = inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput'; // $FlowFixMe\n\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}